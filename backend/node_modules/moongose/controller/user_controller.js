const db = require('../models/index');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const firebaseAdmin = require('../firebase_config.js');
require('crypto').randomBytes(64).toString('hex');
function generateAccessToken(username) {
  return jwt.sign(username, process.env.TOKEN_SECRET || 2700, { expiresIn: '1800h' });
}
const getUser = async (req, res) => {
    try {
      const data = await db.users.find();
      res.json({data})
    } catch (error) {
      res.json({error})
    }
};
const getUserById = async (req, res) => {
  try {
    const getData = await db.users.findOne({mobile: req.params.id}) 
    return res.json({getData})
  } catch (error) {
    res.json({error})
  }
};
const UpdateData = async (req, res) => {
  try {
    const paramsId = req.body.id
    const data = await db.posts.findByIdAndUpdate(paramsId, {email: req.body.email,name: req.body.name,age: req.body.age});
    res.json({data})
  } catch (error) {
    res.json({error})
  }
};
const DeleteData = async (req, res) => {
  try {
    const deleteData = await db.users.deleteOne({_id: req.params.id});
    if (deleteData) {
      res.json({ message: "success" });
    } else {
      res.json({message: "failed"})
    }
  } catch (error) {
    res.json({error})
  }
};
const loginUser = async (req, res) => {
  const user = await db.users.findOne({ mobile: req.body.mobile });
  if (user) {
    const update = await db.users.updateOne({mobile: req.body.mobile}, {firebaseToken: req.body.firebaseToken})
    const user = await db.users.findOne({ mobile: req.body.mobile });
    await firebaseAdmin.sendFirebaseNotification(user.firebaseToken, 'Login', 'message')
    const validPassword = await bcrypt.compare(req.body.password, user.password);
    if (validPassword) {
      res.status(200).json({ status: "SUCCESS", message: user });
    } else {
      res.status(400).json({ status: "FAILED" });
    }
  } else {
    res.status(401).json({ status: "FAILED" });
  }
};
const RegisterUser = async (req, res) => {
   try {
    const salt = await bcrypt.genSalt(10);
    // const token = generateAccessToken({ username: req.body.name });
    const password = await bcrypt.hash(req.body.password, salt);
    const validdation = await db.users.findOne({mobile: req.body.mobile}).count()
    if (validdation === 1) {
      res.json({status: 'FAILED'})
    } else {
      const user = db.users.create({
        name: req.body.name,
        mobile: req.body.mobile,
        password: password,
        // token: token,
        firebaseToken: req.body.firebaseToken
      })
      res.json({status: 'SUCCESS', message: user})
  }
   } catch (error) {
    res.json({status: 'FAILED'})
   }
};
module.exports = {
    getUser,
    getUserById,
    UpdateData,
    DeleteData,
    loginUser,
    RegisterUser
  }