passport.serializeUser(function(user, cb) {
    cb(null, user);
  });
  passport.deserializeUser(function(obj, cb) {
    cb(null, obj);
  });
  app.use('/', require('./routes/index.js'))
  app.get('/success', (req, res) => res.send(userProfile));
  app.get('/error', (req, res) => res.send("error logging in"));
  const GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;
  const GOOGLE_CLIENT_ID = '263056839118-np8svfj5rgqa99crblhm7b16l2n9hoe1.apps.googleusercontent.com';
  const GOOGLE_CLIENT_SECRET = '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';
  passport.use(new GoogleStrategy({
      clientID: GOOGLE_CLIENT_ID,
      clientSecret: GOOGLE_CLIENT_SECRET,
      callbackURL: "http://localhost:2700/auth/google/callback"
    },
    function(accessToken, refreshToken, profile, done) {
      userProfile = profile
        return done(null, profile);
    }
  ));
  app.get('/auth/google', 
    passport.authenticate('google', { scope : ['profile', 'email'] }));
   
  app.get('/auth/google/callback', 
    passport.authenticate('google', { failureRedirect: '/error' }),
    function(req, res) {
      res.json({userProfile});
    });


    const uploadImage = async (req, res) => {
      const path = 'images/'+Date.now()+'.png'
      var buf = Buffer.from(req.body.img.replace(/^data:image\/\w+;base64,/, ""),'base64')
      var data = {
        Bucket: "treeone-one",
        Key: path,
        Body: buf ,
        ACL: 'private',
        ContentType: 'image/jpeg'
      };
      s3Bucket.upload(data, function(err, data1){
          if (err) { 
            console.log(err);
            console.log('Error uploading data1: ', data1); 
          } else {
            console.log(data1);
          }
      });
      try {
          const path = './images/'+Date.now()+'.png'
          const imgdata = req.body.img
          const base64Data = imgdata.replace(/^data:([A-Za-z-+/]+);base64,/, '');
          fs.writeFileSync(path, base64Data,  {encoding: 'base64'});
      } catch (e) {
          res.json({e});
      }
    }